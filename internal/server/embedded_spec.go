// Code generated by go-swagger; DO NOT EDIT.

package server

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "TODO",
    "title": "Solarsteinn",
    "contact": {
      "email": "infra@gateway.fm"
    },
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "basePath": "/",
  "paths": {
    "/{org}/daily": {
      "get": {
        "description": "get daily requests details",
        "tags": [
          "daily"
        ],
        "operationId": "getDaily",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/daily"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/org"
        },
        {
          "$ref": "#/parameters/from"
        },
        {
          "$ref": "#/parameters/to"
        },
        {
          "$ref": "#/parameters/chain"
        },
        {
          "$ref": "#/parameters/apiKey"
        },
        {
          "$ref": "#/parameters/limit"
        },
        {
          "$ref": "#/parameters/offset"
        }
      ]
    },
    "/{org}/requests": {
      "get": {
        "description": "get Requests details",
        "tags": [
          "requests"
        ],
        "operationId": "getRequests",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/requests"
              }
            }
          },
          "default": {
            "$ref": "#/responses/errorResponse"
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/org"
        },
        {
          "$ref": "#/parameters/from"
        },
        {
          "$ref": "#/parameters/to"
        },
        {
          "$ref": "#/parameters/chain"
        },
        {
          "$ref": "#/parameters/apiKey"
        },
        {
          "$ref": "#/parameters/limit"
        },
        {
          "$ref": "#/parameters/offset"
        }
      ]
    }
  },
  "definitions": {
    "daily": {
      "description": "shop model",
      "type": "object",
      "required": [
        "clientID",
        "org",
        "date",
        "count",
        "chain"
      ],
      "properties": {
        "chain": {
          "description": "Chain identifier.",
          "type": "string"
        },
        "clientID": {
          "description": "ID of the client making the request.",
          "type": "string"
        },
        "count": {
          "description": "Count of the requests.",
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "description": "Date of the analytics data.",
          "type": "string",
          "format": "date-time"
        },
        "org": {
          "description": "Organization identifier.",
          "type": "string"
        }
      }
    },
    "error": {
      "description": "the error model uses for all error responses",
      "type": "object",
      "required": [
        "message",
        "code"
      ],
      "properties": {
        "code": {
          "description": "error code",
          "type": "integer",
          "format": "int64",
          "example": 500
        },
        "message": {
          "description": "error message",
          "type": "string",
          "example": "internal server error"
        },
        "payload": {
          "description": "payload definition depended on specific request",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "requests": {
      "description": "shop model",
      "type": "object",
      "required": [
        "id",
        "requestId",
        "clientId",
        "clientIp",
        "chain",
        "org",
        "requestType",
        "requestBundle",
        "requestBody",
        "responseBody",
        "method",
        "status",
        "error",
        "errorCode",
        "createdAt",
        "updatedAt",
        "latency",
        "transport"
      ],
      "properties": {
        "chain": {
          "description": "Chain identifier.",
          "type": "string"
        },
        "clientId": {
          "description": "Client ID making the request.",
          "type": "string"
        },
        "clientIp": {
          "description": "IP address of the client making the request.",
          "type": "string"
        },
        "createdAt": {
          "description": "Timestamp of when the request was created.",
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "description": "Error message for failed requests.",
          "type": "string"
        },
        "errorCode": {
          "description": "Error code for failed requests.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "Unique identifier for the request.",
          "type": "string",
          "format": "uuid"
        },
        "latency": {
          "description": "Time it took for the request to complete.",
          "type": "integer",
          "format": "int64"
        },
        "method": {
          "description": "RPC method used in the request.",
          "type": "string"
        },
        "org": {
          "description": "Organization identifier.",
          "type": "string"
        },
        "requestBody": {
          "description": "Body of the request.",
          "type": "string",
          "format": "byte"
        },
        "requestBundle": {
          "description": "Indicates if the request is bundled.",
          "type": "boolean"
        },
        "requestId": {
          "description": "Request ID.",
          "type": "string"
        },
        "requestType": {
          "description": "Type of the request.",
          "type": "string"
        },
        "responseBody": {
          "description": "Body of the response.",
          "type": "string",
          "format": "byte"
        },
        "status": {
          "description": "Status of the request.",
          "type": "string"
        },
        "transport": {
          "description": "Transport method used for the request.",
          "type": "string"
        },
        "updatedAt": {
          "description": "Timestamp of when the request was last updated.",
          "type": "string",
          "format": "date-time"
        }
      }
    }
  },
  "parameters": {
    "apiKey": {
      "type": "string",
      "description": "API key for filtering analytics.",
      "name": "apiKey",
      "in": "query"
    },
    "chain": {
      "type": "string",
      "description": "Chain identifier for filtering analytics.",
      "name": "chain",
      "in": "query"
    },
    "from": {
      "type": "integer",
      "format": "date-time",
      "description": "Start date for filtering analytics. If not included, retrieves all analytics from the beginning.",
      "name": "from",
      "in": "query"
    },
    "limit": {
      "type": "integer",
      "default": 1,
      "description": "Number of records to retrieve per page for pagination. Default is set by the server.",
      "name": "limit",
      "in": "query"
    },
    "offset": {
      "type": "integer",
      "default": 0,
      "description": "Starting point for records retrieval for pagination. Default is 0.",
      "name": "offset",
      "in": "query"
    },
    "org": {
      "type": "string",
      "description": "Organization identifier.",
      "name": "org",
      "in": "path",
      "required": true
    },
    "to": {
      "type": "integer",
      "format": "date-time",
      "description": "End date for filtering analytics. If not included, retrieves analytics up to the latest.",
      "name": "to",
      "in": "query"
    }
  },
  "responses": {
    "errorResponse": {
      "description": "Error",
      "schema": {
        "$ref": "#/definitions/error"
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "TODO",
    "title": "Solarsteinn",
    "contact": {
      "email": "infra@gateway.fm"
    },
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "basePath": "/",
  "paths": {
    "/{org}/daily": {
      "get": {
        "description": "get daily requests details",
        "tags": [
          "daily"
        ],
        "operationId": "getDaily",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/daily"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Organization identifier.",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "date-time",
          "description": "Start date for filtering analytics. If not included, retrieves all analytics from the beginning.",
          "name": "from",
          "in": "query"
        },
        {
          "type": "integer",
          "format": "date-time",
          "description": "End date for filtering analytics. If not included, retrieves analytics up to the latest.",
          "name": "to",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Chain identifier for filtering analytics.",
          "name": "chain",
          "in": "query"
        },
        {
          "type": "string",
          "description": "API key for filtering analytics.",
          "name": "apiKey",
          "in": "query"
        },
        {
          "type": "integer",
          "default": 1,
          "description": "Number of records to retrieve per page for pagination. Default is set by the server.",
          "name": "limit",
          "in": "query"
        },
        {
          "type": "integer",
          "default": 0,
          "description": "Starting point for records retrieval for pagination. Default is 0.",
          "name": "offset",
          "in": "query"
        }
      ]
    },
    "/{org}/requests": {
      "get": {
        "description": "get Requests details",
        "tags": [
          "requests"
        ],
        "operationId": "getRequests",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/requests"
              }
            }
          },
          "default": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Organization identifier.",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "integer",
          "format": "date-time",
          "description": "Start date for filtering analytics. If not included, retrieves all analytics from the beginning.",
          "name": "from",
          "in": "query"
        },
        {
          "type": "integer",
          "format": "date-time",
          "description": "End date for filtering analytics. If not included, retrieves analytics up to the latest.",
          "name": "to",
          "in": "query"
        },
        {
          "type": "string",
          "description": "Chain identifier for filtering analytics.",
          "name": "chain",
          "in": "query"
        },
        {
          "type": "string",
          "description": "API key for filtering analytics.",
          "name": "apiKey",
          "in": "query"
        },
        {
          "type": "integer",
          "default": 1,
          "description": "Number of records to retrieve per page for pagination. Default is set by the server.",
          "name": "limit",
          "in": "query"
        },
        {
          "type": "integer",
          "default": 0,
          "description": "Starting point for records retrieval for pagination. Default is 0.",
          "name": "offset",
          "in": "query"
        }
      ]
    }
  },
  "definitions": {
    "daily": {
      "description": "shop model",
      "type": "object",
      "required": [
        "clientID",
        "org",
        "date",
        "count",
        "chain"
      ],
      "properties": {
        "chain": {
          "description": "Chain identifier.",
          "type": "string"
        },
        "clientID": {
          "description": "ID of the client making the request.",
          "type": "string"
        },
        "count": {
          "description": "Count of the requests.",
          "type": "integer",
          "format": "int32"
        },
        "date": {
          "description": "Date of the analytics data.",
          "type": "string",
          "format": "date-time"
        },
        "org": {
          "description": "Organization identifier.",
          "type": "string"
        }
      }
    },
    "error": {
      "description": "the error model uses for all error responses",
      "type": "object",
      "required": [
        "message",
        "code"
      ],
      "properties": {
        "code": {
          "description": "error code",
          "type": "integer",
          "format": "int64",
          "example": 500
        },
        "message": {
          "description": "error message",
          "type": "string",
          "example": "internal server error"
        },
        "payload": {
          "description": "payload definition depended on specific request",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "requests": {
      "description": "shop model",
      "type": "object",
      "required": [
        "id",
        "requestId",
        "clientId",
        "clientIp",
        "chain",
        "org",
        "requestType",
        "requestBundle",
        "requestBody",
        "responseBody",
        "method",
        "status",
        "error",
        "errorCode",
        "createdAt",
        "updatedAt",
        "latency",
        "transport"
      ],
      "properties": {
        "chain": {
          "description": "Chain identifier.",
          "type": "string"
        },
        "clientId": {
          "description": "Client ID making the request.",
          "type": "string"
        },
        "clientIp": {
          "description": "IP address of the client making the request.",
          "type": "string"
        },
        "createdAt": {
          "description": "Timestamp of when the request was created.",
          "type": "string",
          "format": "date-time"
        },
        "error": {
          "description": "Error message for failed requests.",
          "type": "string"
        },
        "errorCode": {
          "description": "Error code for failed requests.",
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "description": "Unique identifier for the request.",
          "type": "string",
          "format": "uuid"
        },
        "latency": {
          "description": "Time it took for the request to complete.",
          "type": "integer",
          "format": "int64"
        },
        "method": {
          "description": "RPC method used in the request.",
          "type": "string"
        },
        "org": {
          "description": "Organization identifier.",
          "type": "string"
        },
        "requestBody": {
          "description": "Body of the request.",
          "type": "string",
          "format": "byte"
        },
        "requestBundle": {
          "description": "Indicates if the request is bundled.",
          "type": "boolean"
        },
        "requestId": {
          "description": "Request ID.",
          "type": "string"
        },
        "requestType": {
          "description": "Type of the request.",
          "type": "string"
        },
        "responseBody": {
          "description": "Body of the response.",
          "type": "string",
          "format": "byte"
        },
        "status": {
          "description": "Status of the request.",
          "type": "string"
        },
        "transport": {
          "description": "Transport method used for the request.",
          "type": "string"
        },
        "updatedAt": {
          "description": "Timestamp of when the request was last updated.",
          "type": "string",
          "format": "date-time"
        }
      }
    }
  },
  "parameters": {
    "apiKey": {
      "type": "string",
      "description": "API key for filtering analytics.",
      "name": "apiKey",
      "in": "query"
    },
    "chain": {
      "type": "string",
      "description": "Chain identifier for filtering analytics.",
      "name": "chain",
      "in": "query"
    },
    "from": {
      "type": "integer",
      "format": "date-time",
      "description": "Start date for filtering analytics. If not included, retrieves all analytics from the beginning.",
      "name": "from",
      "in": "query"
    },
    "limit": {
      "type": "integer",
      "default": 1,
      "description": "Number of records to retrieve per page for pagination. Default is set by the server.",
      "name": "limit",
      "in": "query"
    },
    "offset": {
      "type": "integer",
      "default": 0,
      "description": "Starting point for records retrieval for pagination. Default is 0.",
      "name": "offset",
      "in": "query"
    },
    "org": {
      "type": "string",
      "description": "Organization identifier.",
      "name": "org",
      "in": "path",
      "required": true
    },
    "to": {
      "type": "integer",
      "format": "date-time",
      "description": "End date for filtering analytics. If not included, retrieves analytics up to the latest.",
      "name": "to",
      "in": "query"
    }
  },
  "responses": {
    "errorResponse": {
      "description": "Error",
      "schema": {
        "$ref": "#/definitions/error"
      }
    }
  }
}`))
}
